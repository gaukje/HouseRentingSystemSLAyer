@using System.Globalization;
@model Item

<div class="container my-4">
    <div class="row mb-4">
        <h2>@Model.Name</h2>
        <p><strong>Location:</strong> @Model.Location</p>
        <div class="container text-center">
            <img src="@Model.ImageUrl" alt="@Model.Name" class="img-fluid rounded" id="cabinpagelayout-image" />
        </div>
    </div>

    <div class="row">
        <div class="col-lg-8">
            <h4>Cabin hosted by</h4>
            @{
                if (Model.Capacity > 1)
                {
                    <p>@Model.Capacity guests</p>
                }
                else
                {
                    <p>@Model.Capacity guest</p>
                }
            }
            <hr class="hr hr-blurry" />

            <p>@Model.Description</p>
        </div>

        <div class="col-lg-4">
            <div class="sticky-box position-sticky top-0 bg-light border border-dark-subtle rounded-3 p-4">
                <div class="row mb-2">
                    <b>@Model.PricePerNight.ToString("N2", CultureInfo.CreateSpecificCulture("no-NO")) kr per night</b>
                </div>

                <form asp-controller="Order" asp-action="Create" method="post">
                    <div class="section mb-4">
                        <input type="hidden" name="ItemId" value="@Model.Id" />
                        <div class="row mb-2">
                            <div class="col-sm-6">
                                <div class="form-group">
                                    <label for="FromDate">Check-In</label>
                                    <input name="FromDate" type="date" class="form-control" id="fromDate" min="@DateTime.Now.ToString("yyyy-MM-dd")" value="" onchange="handleFromDate('fromDate')" />
                                    <span class="text-danger">@ViewData["FromDateError"]</span>
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="form-group">
                                    <label for="ToDate">Checkout</label>
                                    <input name="ToDate" type="date" class="form-control" id="toDate" min="@DateTime.Now.ToString("yyyy-MM-dd")" value="" onChange="handleToDate('toDate')" />
                                    <span class="text-danger">@ViewData["ToDateError"]</span>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="form-group">
                                <label for="Guests">Guests</label>
                                <input name="Guests" type="number" class="form-control" />
                                <span class="text-danger">@ViewData["GuestsError"]</span>
                            </div>
                        </div>
                    </div>

                    <div class="section d-none mb-4" id="listReserve">
                        <div class="row">
                            <div class="col-7">
                                <p>@Model.PricePerNight.ToString("C", CultureInfo.CreateSpecificCulture("no-NO")) &#215; <span id="countDays"></span></p>
                            </div>
                            <div class="col-5 text-end">
                                <p><span id="costPerNight"></span></p>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-7">
                                <p>Cleaning fee</p>
                            </div>
                            <div class="col-5 text-end">
                                <p><span id="cleaningFee"></span></p>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-7">
                                <p>Service fee</p>
                            </div>
                            <div class="col-5 text-end">
                                <p><span id="serviceFee"></span></p>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-7">
                                <p>Taxes</p>
                            </div>
                            <div class="col-5 text-end">
                                <p><span id="taxes"></span></p>
                            </div>
                        </div>

                        <hr class="hr hr-blurry" />

                        <div class="row">
                            <div class="col-7">
                                <b>Total</b>
                            </div>
                            <div class="col-5 text-end">
                                <b><span id="totalPriceString"></span></b>
                            </div>
                        </div>
                    </div>
                    <div class="form-group d-none">
                        <label for="TotalPrice">Total Price</label>
                        <input name="TotalPrice" type="number" step="0.01" class="form-control" id="totalPrice" />
                        <span class="text-danger">@ViewData["TotalPriceError"]</span>
                    </div>
                    <button type="submit" class="btn btn-primary w-100">Reserve</button>
                </form>


            </div>
        </div>
    </div>
</div>

<script>
    var selectFromDate;
    var selectToDate;
    var intFromDate;
    var intToDate;

    function handleFromDate(date) {
        // Get the selected date from the check-in input
        selectFromDate = document.getElementById(date).value;

        // Calculate the validation for the checkout date by adding one day to the selected date from the check-in input
        var fromDateAddOneDay = new Date(new Date(selectFromDate).setDate(new Date(selectFromDate).getDate() + 1)).toISOString().split('T')[0];

        // Set the minimum value for the "toDate" input to the calculated check-out date
        document.getElementById("toDate").min = fromDateAddOneDay;

        // Reset the value of the "toDate" input, if the user has been using the check-in/checkout more than once
        document.getElementById("toDate").value = "";

        // Convert the check-in date to a integer
        intFromDate = new Date(document.getElementById(date).value).getTime();

        // Reset the checkout date if the user has been using the check-in/checkout more than once
        intToDate = undefined;

        // Hide the reservation list if the user has been using the check-in/checkout more than once
        document.getElementById("listReserve").classList.add("d-none");
    }

    function handleToDate(date) {
        // Get the selected date from the checkout input
        selectToDate = document.getElementById(date).value;

        // Convert the checkout date to a integer
        intToDate = new Date(document.getElementById(date).value).getTime();

        if (selectFromDate != undefined) {
            // Function that calculatates the difference between check-in and checkout dates
            calculateDateDifference();

            // Show the reservation list
            document.getElementById("listReserve").classList.remove("d-none");
        }
    }

    function calculateDateDifference() {
        // Calculating the difference between check-in and checkout dates
        var timeDifference = (intToDate - intFromDate) / (1000 * 3600 * 24);

        // Plural if the difference is more than one
        if (timeDifference > 1) {
            document.getElementById("countDays").innerText = timeDifference + " nights";
        } else {
            document.getElementById("countDays").innerText = timeDifference + " night";
        }

        // Function that calculates the total price
        calculateTotalPrice(timeDifference);
    }

    function calculateTotalPrice(nights) {
        // Parse the PricePerNight from the Model and convert it to a float
        var price = parseFloat('@Model.PricePerNight');

        // Calculating the cost per night by multiplying the price by the number of nights and updating the element's text
        var pricePerNight = price * nights;
        document.getElementById("costPerNight").innerText = pricePerNight.toLocaleString('no-NO', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) + " kr";

        // Calculating the cleaning fee and updating the element's text
        var cleaningFee = 400 + (price * 0.05);
        document.getElementById("cleaningFee").innerText = cleaningFee.toLocaleString('no-NO', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) + " kr";

        // Calculating the service fee and updating the element's text
        var serviceFee = pricePerNight * 0.10;
        document.getElementById("serviceFee").innerText = serviceFee.toLocaleString('no-NO', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) + " kr";

        // Calculating the taxes and updating the element's text
        var taxes = pricePerNight * 0.025;
        document.getElementById("taxes").innerText = taxes.toLocaleString('no-NO', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) + " kr";

        // Calculating the total price and updating the element's text
        var totalPrice = pricePerNight + cleaningFee + serviceFee + taxes;

        document.getElementById("totalPrice").value = totalPrice;
        document.getElementById("totalPriceString").innerText = totalPrice.toLocaleString('no-NO', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) + " kr";
    }
</script>
