@using System.Globalization;
@model Item

<div class="container my-4">
    <div class="row mb-4">
        <h2>@Model.Name</h2>
        <p><strong>Location:</strong> @Model.Location</p>
        <div class="container">
            <div class="ratio ratio-16x9">
                <img src="@Model.ImageUrl" alt="@Model.Name" class="img-fluid rounded" id="itemcard-image" />
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-8">
            <h4>Cabin owned by: @ViewData["CreatorName"]</h4>
            @{
                if (Model.Capacity > 1) {
                    <p>@Model.Capacity guests</p>
                } else {
                    <p>@Model.Capacity guest</p>
                }
            }
            <hr class="hr hr-blurry" />

            <p id="container-description">@Model.Description</p>

        </div>

        <div class="col-lg-4">
            <div class="bg-light border border-dark-subtle rounded-3 p-4">
                <div class="row mb-2">
                    <b>@Model.PricePerNight.ToString("N2", CultureInfo.CreateSpecificCulture("no-NO")) kr per night</b>
                </div>

                <form asp-controller="Order" asp-action="Create" method="post" id="reservationForm">
                    <div class="section mb-4">
                        <input type="hidden" name="ItemId" value="@Model.Id" />
                        <div class="row mb-2">
                            <div class="col-sm-6">
                                <div class="form-group">
                                    <label for="FromDate">Check-In</label>
                                    <input name="FromDate" class="form-control" id="fromDate" min="@DateTime.Now.ToString("yyyy-MM-dd")" value="" placeholder="Add dates" onchange="handleFromDate('fromDate')" readonly />
                                    <span class="text-danger">@ViewData["FromDateError"]</span>
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="form-group">
                                    <label for="ToDate">Checkout</label>
                                    <input name="ToDate" class="form-control" id="toDate" min="@DateTime.Now.ToString("yyyy-MM-dd")" value="" placeholder="Add dates" onChange="handleToDate('toDate')" readonly />
                                    <span class="text-danger">@ViewData["ToDateError"]</span>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="form-group">
                                <label for="Guests">Guests</label>
                                <input name="Guests" type="number" class="form-control" min="1" max="@Model.Capacity" placeholder="Add guests" value="1" />
                                <span class="text-danger">@ViewData["GuestsError"]</span>
                            </div>
                        </div>

                    </div>
                    <p><span class="text-danger" id="errorDateOverlap"></span></p>

                    <div class="section d-none mb-4" id="listReserve">
                        <div class="row">
                            <div class="col-7">
                                <p>@Model.PricePerNight.ToString("N2", CultureInfo.CreateSpecificCulture("no-NO")) kr &#215; <span id="countDays"></span></p>
                            </div>
                            <div class="col-5 text-end">
                                <p><span id="costPerNight"></span></p>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-7">
                                <p>Cleaning fee</p>
                            </div>
                            <div class="col-5 text-end">
                                <p><span id="cleaningFee"></span></p>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-7">
                                <p>Service fee</p>
                            </div>
                            <div class="col-5 text-end">
                                <p><span id="serviceFee"></span></p>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-7">
                                <p>Taxes</p>
                            </div>
                            <div class="col-5 text-end">
                                <p><span id="taxes"></span></p>
                            </div>
                        </div>

                        <hr class="hr hr-blurry" />

                        <div class="row">
                            <div class="col-7">
                                <b>Total</b>
                            </div>
                            <div class="col-5 text-end">
                                <b><span id="totalPriceString"></span></b>
                            </div>
                        </div>
                    </div>

                    <div class="form-group d-none">
                        <label for="TotalPrice">Total Price</label>
                        <input name="TotalPrice" type="number" step="0.01" class="form-control" id="totalPrice" />
                        <span class="text-danger">@ViewData["TotalPriceError"]</span>
                    </div>
                    @if (User.Identity.IsAuthenticated)     //User is logged in
                    {
                        <button type="submit" class="btn btn-primary w-100" id="buttonReserve">Reserve</button> //Enable button
                    }
                    else    //User is not logged in
                    {
                        <a href="/Identity/Account/Login" class="btn btn-primary w-100" id="buttonReserve">Log in to make a reservation</a>
                        //redirecta til login side
                    }
                </form>
            </div>
        </div>
    </div>
</div>


<script>
    var selectFromDate;
    var selectToDate;
    var intFromDate;
    var intToDate;
    var listReservedDates = [];

    // Sending an AJAX request to retrieve a data containing a range of reserved dates
    $(document).ready(function () {
        $.ajax({
            // Destination of the request
            url: '/Order/GetDateRange?itemId=' + @Model.Id,
            // HTTP GET request
            type: 'GET',
            // Stores the retrieved data if the request is successful 
            success: function (data) {
                listReservedDates = data
            },
            // Printing an error message in the console if the request failed
            error: function () {
                console.error('Error fetching data.');
            }
        });

        $(function () {
            // Initialising the attributes of the check-in calender
            $("#fromDate").datepicker({
                // Formating the date to year, month, date
                dateFormat: "yy-mm-dd",
                // Sets the first day of the week to Monday
                firstDay: 1,
                // Sets the minimum date to the date of today
                minDate: new Date(),
                // Removes the option to select existing reservations
                beforeShowDay: function (date) {
                    var dateString = jQuery.datepicker.formatDate('yy-mm-dd', date);
                    return [listReservedDates.indexOf(dateString) == -1]
                }
            });

            // Initialising the attributes of the checkout calender
            $("#toDate").datepicker({
                // Formating the date to year, month, date
                dateFormat: "yy-mm-dd",
                // Sets the first day of the week to Monday
                firstDay: 1,
                // Sets the minimum date to the date of today
                minDate: new Date(),
                // Removes the option to select existing reservations
                beforeShowDay: function (date) {
                    var dateString = jQuery.datepicker.formatDate('yy-mm-dd', date);
                    return [listReservedDates.indexOf(dateString) == -1]
                }
            });
        });
    })

    function handleFromDate(date) {
        // Getting the selected date from the check-in input
        selectFromDate = document.getElementById(date).value;

        // Clearing out the error message if there is an error message for over the second time
        document.getElementById("errorDateOverlap").innerText = "";

        // Calculating the validation for the checkout date by adding one day to the selected date from the check-in input
        var fromDateAddOneDay = new Date(new Date(selectFromDate).setDate(new Date(selectFromDate).getDate() + 1));

        // Setting the minimum value for the "toDate" input to the calculated check-out date
        document.getElementById("toDate").min = fromDateAddOneDay;

        // Updating the attributes of the checkout calender 
        $("#toDate").datepicker("destroy");
        $("#toDate").datepicker({
            dateFormat: "yy-mm-dd",
            firstDay: 1,
            minDate: fromDateAddOneDay,
            beforeShowDay: function (date) {
                var dateString = jQuery.datepicker.formatDate('yy-mm-dd', date);
                return [listReservedDates.indexOf(dateString) == -1]
            }
        });

        // Reset the value of the "toDate" input, if the user has been using the check-in/checkout more than once
        document.getElementById("toDate").value = "";

        // Convert the check-in date to a integer
        intFromDate = new Date(document.getElementById(date).value).getTime();

        // Reset the checkout date if the user has been using the check-in/checkout more than once
        intToDate = undefined;

        // Hide the reservation list if the user has been using the check-in/checkout more than once
        document.getElementById("listReserve").classList.add("d-none");
    }

    function handleToDate(date) {
        // Get the selected date from the checkout input
        selectToDate = document.getElementById(date).value;

        // Convert the checkout date to a integer
        intToDate = new Date(document.getElementById(date).value).getTime();

        // Continues to the function that checks if there is an existing reservation between the selected dates
        controllDate();
    }

    function controllDate() {
        // Converting the selected dates to JavaScript Date objects
        var fromDateObj = new Date(selectFromDate);
        var toDateObj = new Date(selectToDate);

        // Initialise a flag to track overlap status
        var overlapFound = false;

        // Looping through the date range from "From"-date to "To"-date
        for (var currentDate = fromDateObj; currentDate <= toDateObj; currentDate.setDate(currentDate.getDate() + 1)) {
            // Converts the current date to a string in 'yyyy-mm-dd' format (same format as "listReserveDate")
            var currentDateStr = currentDate.toISOString().split('T')[0];

            // Checks if the current date is in the list of reserved dates
            if (listReservedDates.includes(currentDateStr)) {
                // Sets the overlap flag to true if an overlap is found
                overlapFound = true;
                // Exits the loop since an overlap has been detected
                break;
            }
        }

        // Disables the button if there is an overlap in the selected dates
        if (overlapFound) {
            document.getElementById("errorDateOverlap").innerText = "Please choose alternative dates, as the selected dates are overlapping with existing reservations.";
            document.getElementById("buttonReserve").disabled = true;

            // Enables the button if there is not an overlap in the selected dates
        } else {
            document.getElementById("buttonReserve").disabled = false;
            if (selectFromDate !== undefined) {
                // Continues to the function that calculates the difference between check-in and checkout dates
                calculateDateDifference();

                // Shows the reservation list
                document.getElementById("listReserve").classList.remove("d-none");
            }
        }
    }

    function calculateDateDifference() {
        // Calculating the difference between check-in and checkout dates
        var timeDifference = Math.floor((intToDate - intFromDate) / (1000 * 3600 * 24));

        // Plural if the difference is more than one
        if (timeDifference > 1) {
            document.getElementById("countDays").innerText = timeDifference + " nights";
        } else {
            document.getElementById("countDays").innerText = timeDifference + " night";
        }

        // Function that calculates the total price
        calculateTotalPrice(timeDifference);
    }

    function calculateTotalPrice(nights) {
        // Parse the PricePerNight from the Model and convert it to a float
        var price = parseFloat('@Model.PricePerNight');

        // Calculating the cost per night by multiplying the price by the number of nights and updating the element's text
        var pricePerNight = price * nights;
        document.getElementById("costPerNight").innerText = pricePerNight.toLocaleString('no-NO', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) + " kr";

        // Calculating the cleaning fee and updating the element's text
        var cleaningFee = 400 + (price * 0.05);
        document.getElementById("cleaningFee").innerText = cleaningFee.toLocaleString('no-NO', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) + " kr";

        // Calculating the service fee and updating the element's text
        var serviceFee = pricePerNight * 0.10;
        document.getElementById("serviceFee").innerText = serviceFee.toLocaleString('no-NO', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) + " kr";

        // Calculating the taxes and updating the element's text
        var taxes = pricePerNight * 0.025;
        document.getElementById("taxes").innerText = taxes.toLocaleString('no-NO', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) + " kr";

        // Calculating the total price and updating the element's text
        var totalPrice = pricePerNight + cleaningFee + serviceFee + taxes;

        document.getElementById("totalPrice").value = totalPrice;
        document.getElementById("totalPriceString").innerText = totalPrice.toLocaleString('no-NO', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) + " kr";
    }

    // Add this after your existing script
    document.getElementById('reservationForm').addEventListener('submit', function (event) {
        // Check if the FromDate and ToDate are empty
        var fromDateValue = document.getElementById('fromDate').value;
        var toDateValue = document.getElementById('toDate').value;

        if (!fromDateValue || !toDateValue) {
            // Prevent form submission
            event.preventDefault();

            // Show an error message to the user
            alert('Please select both Check-In and Checkout dates before reserving.');
        }
    });

</script>
